#version 330 core

// Interpolated values from the vertex shaders
in vec3 vertexPosition_cameraspace;
in vec3 fragmentColor;
in vec3 vertexNormal_cameraspace;
in vec2 texCoord;
in vec4 shadowCoord;

// Ouput data
layout (location = 0) out vec4 position_cameraspace;
layout (location = 1) out vec4 normal_cameraspace;
layout (location = 2) out vec4 ambientColor;
layout (location = 3) out vec4 diffuseColor;
layout (location = 4) out vec4 specularColor;
layout (location = 5) out vec4 emissiveColor;

struct Material {
	vec3 kAmbient;
	vec3 kDiffuse;
	vec3 kSpecular;
	vec3 kEmissive;
	float kShininess;
};

struct FogParam
{
	vec3 color;		// Fog color
	float start;	// For linear fog
	float end;		// For linear fog
	float density;	// For exponential fog
	int type;		// 0 = linear, 1 = exp, 2 = exp2
	bool enabled;	// Toggle fog
};

float getFogFactor(FogParam fog, float fogDistance)
{
	if(fog.enabled == false)
		return 0.0;

	float factor = 0.0;
	if(fog.type == 0) 
		factor = (fog.end - fogDistance) / (fog.end - fog.start); 
	else if(fog.type == 1) 
		factor = exp(- fog.density * fogDistance); 
	else if(fog.type == 2) 
		factor = exp(- pow(fog.density * fogDistance, 2.0) ); 
       
	factor = 1.0 - clamp(factor, 0.0, 1.0); 
    
	return factor;
}

// Constant values
const int MAX_TEXTURES = 8;

// Values that stay constant for the whole mesh.
uniform bool lightEnabled;
uniform Material material;
uniform bool colorTextureEnabled[MAX_TEXTURES];
uniform sampler2D colorTexture[MAX_TEXTURES];
uniform sampler2D shadowMap;
uniform FogParam fogParam;

//without shadow improvement
float getShadowEffect()
{
	float visibility = 1.0;
	float bias = 0.005;
	if(texture2D(shadowMap, shadowCoord.xy).x < shadowCoord.z - bias) {
		visibility = 0.25;
	}
	return visibility;
}

void main() {
	int texCount = 0;
	// Material properties
	vec4 materialColor = vec4(0, 0, 0, 1);
		
	for (int i = 0; i < MAX_TEXTURES; ++i)
	{
		if(colorTextureEnabled[i] == true)
		{
			materialColor += texture2D( colorTexture[i], texCoord );
			++texCount;
		}		
	}
	if (texCount > 0)
		materialColor = materialColor/texCount;
	else
		materialColor = vec4( fragmentColor, 1 );

	float visibility = getShadowEffect();
		
	// Color output
	if(lightEnabled == true)
	{
		ambientColor = vec4(materialColor.xyz * material.kAmbient, 1);
		diffuseColor = vec4(materialColor.xyz * material.kDiffuse, 1);
		specularColor = vec4(material.kSpecular, material.kShininess); //storing shininess in specular's alpha channel
		emissiveColor = vec4(materialColor.xyz * material.kEmissive, 1);
	}
	else
	{
		ambientColor = vec4(materialColor.xyz, 1);
		diffuseColor = vec4(0, 0, 0, 1);
		specularColor = vec4(0, 0, 0, 1);
		emissiveColor = vec4(0, 0, 0, 1);
	}
	position_cameraspace = vec4(vertexPosition_cameraspace, visibility); //storing shadow visibility in position's alpha channel
	normal_cameraspace = vec4(normalize(vertexNormal_cameraspace), 1);
	if(fogParam.enabled)
	{
		float fogDistance = abs(vertexPosition_cameraspace.z);
		float fogFactor = getFogFactor(fogParam, fogDistance);
		normal_cameraspace.w = fogFactor; //storing fogFactor in normal's alpha channel
	}
}